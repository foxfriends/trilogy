test "a <> b" {
    assert "hello" <> "world" == "helloworld"
    assert "hello" <> " " <> "world" == "hello world"
}

test not "<> only works on strings" {
    [1] <> [2]
}

test "a <> b pattern" {
    let "hello" <> world = "hello world"
    assert world == " world"

    let hello <> " world" = "hello world"
    assert hello == "hello"

    let "br" <> i <> "ck" = "brick"
    assert i == "i"
}

test "(<>) a b" {
    assert (<>) "a" "b" == "ab"
    let glue = (<>)
    assert glue "a" "b" == "ab"
    assert glue "b" "c" == "bc"

    let hello = (<>) "hello"
    assert hello " world" == "hello world"
    assert hello " moon" == "hello moon"
}

test "templates" {
    let world = "world"
    assert $"Hello ${world}!" == "Hello world!"
}

func repeat [s] [] = s
func repeat [s, ..ss] [i, ..ii] = s <> i <> i <> repeat ss ii

test "tagged templates" {
    let world = "world"
    assert $"Hello ${world}!"repeat == "Hello worldworld!"
}

test "strings can be indexed with integers" {
    assert "hello" . 1 == 'e'
}

test not "non-number accessor is an error" {
    "hello"."1"
}

test not "non-integer accessor is an error" {
    "hello" . 1.5
}

test "out of bounds access yields 'MIA" {
    let x = with "hello" . 5
        when 'MIA cancel '.'
        else yield
    assert x == '.'
}

test "strings can hold multi-byte characters" {
    "this ðŸ¦“ is a zebra"
}

test "string indexing returns by characters, not bytes" {
    "this ðŸ¦“ is a zebra" . 2 == "i"
    "this ðŸ¦“ is a zebra" . 9 == "i"
    "this ðŸ¦“ is a zebra" . 5 == "ðŸ¦“"
}

test not "cannot assign into string" {
    "hello".1 = "u"
}
