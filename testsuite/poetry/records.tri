test "record literals" {
    let record = {| 1 => 1, 2 => "a", true => 3 |}
    assert record == {| 1 => 1, 2 => "a", true => 3 |}
    assert record === record
    assert record !== {| 1 => 1, 2 => "a", true => 3 |}
    assert {| 1 => 1, 1 => 2 |} == {| 1 => 2 |}
}

test "spread into record" {
    let abc = {| 1 => 1, 2 => "a", true => 3 |}
    assert {| ..abc |} == {| 1 => 1, 2 => "a", true => 3 |}
    assert {| ..abc |} == abc
    assert {| ..abc |} !== abc
    assert {| 1 => 2, ..abc, true => 4 |} == {| 1 => 1, 2 => "a", true => 4 |}

    let bcd = {| 2 => "b", true => 4, false => 3 |}

    assert {| ..abc, ..bcd |} == {| 1 => 1, 2 => "b", true => 4, false => 3 |}
}

test not "spread array into record" {
    {| ..[1, 2, 3] |}
}

test not "spread set into record" {
    {| ..[| 1, 2 |] |}
}

test "can comprehend a query" {
    let answer = {| x => 2 * x for x = 1 or x = 2 or x = 1 |}
    assert answer == {| 1 => 2, 2 => 4 |}
}

test "can yield within comprehensions" {
    let answer = with {| x => y for x = yield 'X and y = 6 and is x > y |}
        when 'X cancel {|
            ..resume 6,
            ..resume 7,
            ..resume 8,
            ..resume 7,
        |}
        else yield
    assert answer == {|
        7 => 6,
        8 => 6,
    |}
}

test "record iteration" {
    let mut total = 0
    for x:y in {| 1 => 2, 3 => 4 |} {
        total += x + y
    }
    assert total == 10

    let mut total = 0
    for x:y in {| 1 => 2, 3 => 4, 1 => 6 |} {
        total += x + y
    }
    assert total == 14
}
