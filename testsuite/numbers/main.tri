proc main!() {
  assert "neg zero" as 0 == -0

  assert "add" as 1 + 2 == 3
  assert "add zero" as 2 + 0 == 2
  assert "big add" as 4294967296 + 2 == 4294967298
  assert "add big" as 2 + 4294967296 == 4294967298
  assert "add to big" as 4294967295 + 1 == 4294967296
  assert "add to big 2" as 4294967295 + 2 == 4294967297
  assert "big add big" as 4294967295 + 4294967295 == 8589934590

  assert "neg add neg" as -3 + -5 == -8
  assert "neg add pos" as -3 + 1 == -2
  assert "neg add pos cross" as -3 + 5 == 2
  assert "pos add neg" as 3 + -2 == 1
  assert "pos add neg cross" as 3 + -5 == -2

  assert "rat reduce whole" as 6/3 == 2
  assert "rat reduce partial" as 3/9 == 1/3

  assert "rat add rat" as 1/3 + 1/3 == 2/3
  assert "rat add rat reduce" as 1/3 + 2/3 == 1
  assert "rat add rat no match" as 1/2 + 2/3 == 7/6
  assert "rat add negrat" as 1/3 + -1/3 == 0
  assert "rat add zero" as 1/3 + 0 == 1/3

  assert "sub" as 8 - 2 == 6
  assert "big sub big to small" as 4294967299 - 4294967296 == 3
  assert "big sub" as 4294967299 - 2 == 4294967297
  assert "sub to small" as 4294967297 - 2 == 4294967295
  assert "big sub big to big" as 18446744065119617025 - 4294967295 == 18446744060824649730

  assert "neg sub neg" as -3 - -1 == -2
  assert "neg sub neg cross" as -3 - -5 == 2
  assert "neg sub pos" as -3 - 1 == -4
  assert "pos sub neg" as 3 - -2 == 5
  assert "pos sub pos cross" as 3 - 5 == -2

  assert "rat sub rat" as 1/3 - 2/3 == -1/3
  assert "rat sub rat reduce" as 5/3 - 2/3 == 1
  assert "rat sub rat no match" as 1/2 - 2/3 == -1/6
  assert "rat sub negrat" as 1/3 - -1/3 == 2/3
  assert "rat sub zero" as 1/3 - 0 == 1/3

  assert "mul" as 7 * 3 == 21
  assert "big mul" as 4294967296 * 3 == 12884901888
  assert "mul big" as 3 * 4294967296 == 12884901888
  assert "big mul big" as 4294967298 * 4294967298 == 18446744090889420804

  assert "neg mul neg" as -2 * -3 == 6
  assert "pos mul neg" as 2 * -3 == -6
  assert "neg mul pos" as -2 * 3 == -6

  assert "rat mul rat reduce" as 2/3 * 5/2 == 5/3

  assert "div" as 24 / 3 == 8
  assert "big div" as 17179869192 / 4 == 4294967298
  assert "big div to small" as 4294967298 / 2 == 2147483649
  assert "big div big to small" as 17179869180 / 8589934590 == 2
  assert "big div big to big" as 18446744090889420804 / 4294967298 == 4294967298

  assert "neg div neg" as -9 / -3 == 3
  assert "pos div neg" as 9 / -3 == -3
  assert "neg div pos" as -9 / 3 == -3

  assert "div to rat" as 10 / 6 == 5/3
  assert "div by rat" as 10 / 1/2 == 20

  assert "intdiv exact" as 21 // 3 == 7
  assert "intdiv pos" as 22 // 3 == 7
  assert "intdiv neg" as -22 // 3 == -7
  assert "intdiv imaginary no real" as 21 // 0i1 == 0
  assert "intdiv imaginary some real" as 21 // 3i1 == 6

  assert "rem zero" as 24 % 3 == 0
  assert "rem" as 24 % 7 == 3
  assert "big rem small" as 17179869192 % 7 == 3
  assert "big rem big" as 4294967298 % 4294967299 == 4294967298
  assert "big rem big to small" as 17179869183 % 17179869180 == 3

  assert "neg rem zero" as -24 % 3 == 0
  assert "rem neg zero" as 24 % -3 == 0
  assert "neg rem nonzero" as -22 % 3 == -1
  assert "rem neg nonzero" as 22 % -3 == 1

  assert "rem imperfect" as 7/3 % 3/2 == 5/6
  assert "neg rem imperfect" as -7/3 % 3/2 == -5/6
  assert "rem neg imperfect" as 7/3 % -3/2 == 5/6
  assert "neg rem neg imperfect" as -7/3 % -3/2 == -5/6

  assert "str 1" as $"${0}" == "0"
  assert "str 2" as $"${31}" == "31"
  assert "str 3" as $"${10000000000000000000}" == "10000000000000000000"
  assert "str 4" as $"${18446744090889420804}" == "18446744090889420804"
  assert "str 5" as $"${-5}" == "-5"
  assert "str 6" as $"${5/3}" == "5/3"
  assert "str 7" as $"${-5/3}" == "-5/3"

  assert "imaginary add" as 0i3 + 0i4 == 0i7
  assert "imaginary sub" as 0i3 - 0i4 == -0i1
  assert "imaginary mul" as 0i3 * 0i4 == -12
  assert "imaginary div" as 0i3 / 0i4 == 3/4

  assert "complex add" as 1i3 + 2i4 == 3i7
  assert "complex sub" as 1i3 - 2i4 == -1 - 0i1
  assert "complex mul" as 1i3 * 2i4 == -10 + 0i10
  assert "complex div" as 1i3 / 2i4 == 7/10i1/10
  assert "real mod complex" as 21 % 3i1 == 3 - 0i6
  assert "complex mod real" as 3i3 % 4 == 3i3
  assert "complex mod complex" as 37i226 % 26i120 == 11i106

  assert "str 8" as $"${3i4}" == "3+4i"
  assert "str 9" as $"${-3i4}" == "-3-4i"
  assert "str 10" as $"${0i4}" == "4i"
  assert "str 11" as $"${-3 + 0i4}" == "-3+4i"
  assert "str 12" as $"${3 - 0i4}" == "3-4i"

  assert "cmp lt true" as 3 < 5
  assert "cmp lt false" as !(9 < 5)
  assert "cmp lt eq" as !(3 < 3)
  assert "cmp lt complex" as !(3 < 0i3)

  assert "cmp gt true" as 9 > 5
  assert "cmp gt false" as !(3 > 5)
  assert "cmp gt eq" as !(3 > 3)
  assert "cmp gt complex" as !(3 > 0i3)
}
