test "evaluates the second branch for each pass of the first" {
    assert [x:y for x in [1, 2, 3] and y in [2, 3, 4]] == [1:2, 1:3, 1:4, 2:2, 2:3, 2:4, 3:2, 3:3, 3:4]
}

test "does not evaluate the second branch if the first fails" {
    assert [y for x in [] and y = 5] == []
}

test "reevaluates the second branch expression each time" {
    assert [y for x in [1, 2, 3] and y = x * 2] == [2, 4, 6]
}

test "does not pass if either branch fails" {
    assert !(is x in [1, 2, 3] and end)
}

test "fully exhausts the first branch even if the second never passes" {
    with { [x for x in [1, 2, yield 'DONE] and end] }
        when 'DONE invert { exit unit }
        else cancel 3
    assert false
}
