test "precedence" {
    assert !is not pass and end
    assert is not pass or pass
}

test "passes when the inner query fails" {
    assert is not end
}

test "fails when the inner query passes" {
    assert !is not pass
}

test "works on = queries" {
    assert is not (5 = 6)
    assert !is not (5 = 5)
}

test "works on in queries" {
    assert is not 5 in [1, 2, 3]
    assert !is not 2 in [1, 2, 3]
}

test "works on conjunction" {
    assert is not (pass and end)
    assert is not (end and pass)
    assert is not (end and end)
    assert !is not (pass and pass)
}

test "works on disjunction" {
    assert !is not (pass or end)
    assert !is not (end or pass)
    assert is not (end or end)
    assert !is not (pass or pass)
}

test "does not allow access to any bindings that occurred before failing" {
    let x = 5
    assert [n for not (x in [1, 2] and end) and n = x] == [5]
}

rule isValid(1)
test "variables bound before not are available after" {
    assert !is (i = 1 and not isValid(i))
    assert !is (i = 1 and not isValid(^i))
    assert is (i = 2 and not isValid(^i))
    assert is (i = 2 and not isValid(i))
}
