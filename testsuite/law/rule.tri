rule fact(1)
rule fact(2)
rule fact(3)

test "simple facts yield all values" {
    assert [x for fact(x)] == [1, 2, 3]
}

test "a fact will pass with a matched case" {
    assert ['ok for fact(2)] == ['ok]
}

test "a fact will fail with no matched case" {
    assert ['ok for fact(4)] == []
}

test "a fact can be applied many times on the right side of a conjunction" {
    assert [x for (x = 1 or x = 3 or x = 5) and fact(x)] == [1, 3]
}

test "a fact can be on the left side of a conjunction" {
    assert [x for fact(x) and is x >= 2] == [2, 3]
}

rule ab(a, b) <- fact(a) and fact(b)
rule ab(a, b) <- not fact(a) and not fact(b)

test "a rule applied with no open bindings passes when it is valid" {
    assert is ab(1, 3)
}

test "a rule applied with no open bindings false when it is invalid" {
    assert !(is ab(1, 4))
}

test "a rule applied with some open bindings will find all solutions" {
    assert [b for ab(1, b)] == [1, 2, 3]
}

test "a rule applied with all open bindings will find all solutions" {
    assert [a:b for ab(a, b)] == [1:1, 1:2, 1:3, 2:1, 2:2, 2:3, 3:1, 3:2, 3:3]
}

test "a rule call can use the same variable many times" {
    assert [a:a for ab(a, a)] == [1:1, 2:2, 3:3]
}

test not "it is an error to call a rule with the wrong arity" {
    for ab(1, 2, 3) {}
}

rule recursive([], 0)
rule recursive([x, ..xs], n) <- recursive(xs, n2) and n = n2 + x

test "a rule can be applied recursively" {
    let recursive([1, 2, 3], n)
    assert n == 6
}

test "a recursive rule applied with no open bindings passes if the rule passes" {
    assert [true for recursive([1, 2, 3], 6)] == [true]
}

test "a recursive rule applied with no open bindings fails if the rule fails" {
    assert [true for recursive([1, 2, 3], 3)] == []
}

test "a recursive rule applied with bindings that cannot be empty fails" {
    assert [true for recursive([], 3)] == []
}

rule higher(key, val) <- key(val)

test "a rule can be higher order and call a provided rule" {
    assert is higher(^fact, 3)
}

test not "it is an error to call something that is not a rule" {
    let n = 3
    for n(3) {}
}

test not "it is an error for call something that is not a rule in higher order" {
    for higher(3, 3) {}
}

test "a rule is equal to itself" {
    assert ab == ab
    assert ab === ab
}

test "a rule is not equal to another rule" {
    assert ab != fact
    assert ab !== fact
}
