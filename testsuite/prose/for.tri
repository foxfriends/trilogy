test "for loops work with = queries" {
    let mut total = 0
    for x = 15 {
        total += x
    }
    assert total == 15
}

test "for loops work with in queries" {
    let mut total = 0
    for x in [1, 2, 3, 4, 5] {
        total += x
    }
    assert total == 15
}

test "for loops work with conjunction queries" {
    let mut total = 0
    for x in [1, 2, 3, 4, 5] and y in [1, 2, 3] {
        total += x + y
    }
    assert total == 75
}

test "for loops work with disjucnction queries" {
    let mut total = 0
    for x in [1, 2, 3, 4, 5] or x in [1, 2, 3] {
        total += x
    }
    assert total == 21
}

test "can break in a for loop" {
    let mut total = 0
    for x in [1, 2, 3, 4, 5] {
        total += x
        if x == 3 { break }
    }
    assert total == 6
}

test "can continue in a for loop" {
    let mut total = 0
    for x in [1, 2, 3, 4, 5] {
        if x == 3 { continue }
        total += x
    }
    assert total == 12
}

test "for else branch gets triggered when query never happens" {
    for x in [] {
        assert "entered loop" as false
    } else {
        exit unit
    }
    assert "reached end" as false
}

test "for else branch does not get triggered if the query happens" {
    for pass {
    } else {
        assert "entered loop" as false
    }
}

test "for else branch does not get triggered if the query is broken on the first" {
    for pass {
        break
    } else {
        assert "entered loop" as false
    }
}

test "for else branch does not get triggered if the query is continued on the only" {
    for pass {
        continue
    } else {
        assert "entered loop" as false
    }
}

test "for loops can be nested" {
    let mut total = 0
    for x in [1, 2, 3] {
        for y in [10, 100] {
            total += x * y
        }
    }
    assert total == 660
}

test "break can break from an inner loop" {
    let mut total = 0
    for x in [1, 2, 3] {
        for y in [10, 100] {
            if x * y == 20 { break }
            total += x * y
        }
    }
    assert total == 440
}

test "first class break can break from a nested loop" {
    let mut total = 0
    for x in [1, 2, 3] {
        let break_all = (break)
        for y in [10, 100] {
            if x * y == 20 { break_all unit }
            total += x * y
        }
    }
    assert total == 110
}

test "continue can continue from an inner loop" {
    let mut total = 0
    for x in [1, 2, 3] {
        for y in [10, 100] {
            if x * y == 20 { continue }
            total += x * y
        }
    }
    assert total == 640
}

test "first class continue can continue from a nested loop" {
    let mut total = 0
    for x in [1, 2, 3] {
        let continue_all = (continue)
        for y in [10, 100] {
            if x * y == 20 { continue_all unit }
            total += x * y
        }
    }
    assert total == 440
}
