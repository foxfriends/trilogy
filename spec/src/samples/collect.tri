proc collect!() body {
    let mut collection = []
    body!() when 'next(value) resume {
        collection.[length collection] = value
    }
    return collection
}

proc hello!() {
    yield 'next('h)
    yield 'next('e)
    yield 'next('l)
    yield 'next('l)
    yield 'next('o)
}

proc twice!() body {
    return body!() when event resume {
        yield event
        yield event
    }
}

proc reverse!() body {
    return body!() when event do continuation. {
        continuation unit
        yield event
    }
}

proc main!() {
    let collected = collect!() do. hello!()
    println!($"Collected once: ${collected}")
    let collectedTwice = collect!() do. twice!() do. hello!()
    println!($"Collected twice: ${collectedTwice}")
}
