module UnordList {
    func empty = 'unordered(unit)

    func insert x 'unordered(xs) = 'unordered(x : xs)

    proc print!('unordered(list)) {
        for item in list {
            println!(item)
        }
    }

    export empty, insert, print
}

module OrdList {
    func empty = 'ordered(unit)

    func insert v 'ordered(x : xs) =
        if v < x then 'ordered(v : x : xs)
        else let 'ordered(oxs) = insert v xs
            'ordered(x : oxs)

    proc print!('ordered(list)) {
        for item in list {
            println!(item)
        }
    }

    export empty, insert, print
}

proc collectInto!(Collection, iter) {
    let mut collection = Collection.empty
    for item in iter {
        collection insert= item
    }
    return collection
}

proc main!() {
    let unordered = collectInto!(UnordList, [1, 3, 2, 6, 4])
    let ordered = collectInto!(OrdList, [1, 3, 2, 6, 4])
    UnordList.print!(unordered)
    OrdList.print!(ordered)
}
