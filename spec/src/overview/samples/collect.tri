proc collect!(body) {
    let mut collection = []
    with body!()
        when 'next(value) then {
            collection push= value
            resume
        }
        else yield
    return collection
}

proc hello!() {
    yield 'next('h)
    yield 'next('e)
    yield 'next('l)
    yield 'next('l)
    yield 'next('o)
}

proc map!(transform, body) {
    return with body!()
        when event resume yield transform event
        else yield
}

proc reverse!(body) {
    return with body!()
        when event then {
            resume
            yield event
        }
        else yield
}

proc main!() {
    let collected = collect!(do() hello!())
    println!($"Collected once: ${collected}")
    let doubled = collect!(do() map!((* 2), do() hello!()))
    println!($"Collected doubled: ${doubled}")
}
