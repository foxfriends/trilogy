proc collect!(body) {
    let mut collection = []
    body!() when 'next(value) resume {
        collection.[length collection] = value
    }
    return collection
}

proc hello!() {
    yield 'next('h)
    yield 'next('e)
    yield 'next('l)
    yield 'next('l)
    yield 'next('o)
}

proc map!(transform, body) {
    return body!() when event resume yield transform event
}

proc reverse!(body) {
    return body!() when event invert {
        resume unit
        yield event
    }
}

proc main!() {
    let collected = collect!(do() hello!())
    println!($"Collected once: ${collected}")
    let doubled = collect!(do() map!((* 2), do() hello!()))
    println!($"Collected doubled: ${doubled}")
}
