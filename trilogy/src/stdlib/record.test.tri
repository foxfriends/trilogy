module record at "trilogy:record" use contains, remove, keys, values, length, get, insert, delete

test "contains" {
    assert contains "hello" {| "hello" => "world", "goodbye" => "world" |}
    assert !(contains "notkey" {| "hello" => "world", "goodbye" => "world" |})
    assert !(contains "world" {| "hello" => "world", "goodbye" => "world" |})
}

test "remove" {
    assert remove "hello" {| "hello" => "world", "goodbye" => "world" |} == {| "goodbye" => "world" |}
    assert remove "notkey" {| "hello" => "world", "goodbye" => "world" |} == {| "hello" => "world", "goodbye" => "world" |}
    assert remove "world" {| "hello" => "world", "goodbye" => "world" |} == {| "hello" => "world", "goodbye" => "world" |}
}

test "keys" {
    let k = [key for key in keys {| "hello" => "world", "goodbye" => "world" |}]
    assert is "hello" in k
    assert is "goodbye" in k
    assert [key for key in keys {| |}] == []
}

test "values" {
    let k = [val for val in values {| "hello" => "1", "goodbye" => "2" |}]
    assert is "1" in k
    assert is "2" in k
    let k2 = [val for val in values {| "hello" => "world", "goodbye" => "world" |}]
    assert k2 == ["world", "world"]
    assert [val for val in values {| |}] == []
}

test "length" {
    assert length {| 1 => 1, 2 => 2, 3 => 3 |} == 3
    assert length {| |} == 0
}

test "get" {
    assert get "a" {| "a" => "1", "b" => "2" |} == "1"
    with get "hello" {| "a" => "1", "b" => "2" |}
        when 'MIA then { exit unit }
        else cancel unit
    assert false
}

test "insert" {
    assert insert "a" 1 {| "b" => 2 |} == {| "a" => 1, "b" => 2 |}
    assert insert "a" 1 {| |} == {| "a" => 1 |}
    assert insert "a" 1 {| "a" => 2 |} == {| "a" => 1 |}
}

test "delete" {
    let x = {| "hello" => "world", "goodbye" => "moon" |}
    let y = x
    delete!(x, "goodbye")
    assert x == {| "hello" => "world" |}
    assert y == {| "hello" => "world" |}
    assert x === y

    delete!(y, "hello")
    assert x == {||}
    assert y == {||}
    assert x === y
}
