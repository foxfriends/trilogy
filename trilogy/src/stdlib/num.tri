module native at "trilogy:num/native" use cast, im, re, lcm
export re, im, cast, lcm

## Returns the real and imaginary parts of a number as a tuple of real numbers.
func parts n = (native::re n) : (native::im n)
export parts

## Returns the absolute value of a number
func abs n = if n < 0 then -n else n
export abs

test "abs returns the number if it was above zero" {
    assert abs 3 == 3
}

test "abs returns the positive version of the number if it was below zero" {
    assert abs (-3) == 3
}

test not "abs works on non-numbers" {
    abs "NAN"
}

## Returns the larger of two numbers. If the numbers cannot be compared,
## yields 'NAN
func max a b = match a > b
    case true then a
    case false then b
    else yield 'NAN
export max

test "max" {
    assert max 1 3 == 3
    assert max 1 (-3) == 1
    with { max 3 "A" }
        when 'NAN cancel unit
        else invert { assert false }
}

## Returns the smaller of two numbers. If the numbers cannot be compared,
## yields 'NAN
func min a b = match a > b
    case false then a
    case true then b
    else yield 'NAN
export min

test "min" {
    assert min 1 3 == 1
    assert min 1 (-3) == (-3)
    with { min 3 "A" }
        when 'NAN cancel unit
        else invert { assert false }
}
