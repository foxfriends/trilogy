module native at "trilogy:num/native" use cast, im, re, lcm, parse_int, to_fixed
export re, im, cast, lcm, parse_int, to_fixed

## Returns the real and imaginary parts of a number as a tuple of real numbers.
func parts n = (native::re n) : (native::im n)
export parts

## Returns the absolute value of a number
func abs n and typeof 'number = if n < 0 == true then -n else n
export abs

## Returns the larger of two numbers. If the numbers cannot be compared,
## yields 'NAN
func max a b = match a > b
    case true then a
    case false then b
    else _ then yield 'NAN
export max

## Returns the smaller of two numbers. If the numbers cannot be compared,
## yields 'NAN
func min a b = match a > b
    case false then a
    case true then b
    else _ then yield 'NAN
export min

## Returns true if the number is odd, and false otherwise.
func is_odd a = im a == 0 && (abs a % 2) == 1

## Returns true if the number is even, and false otherwise.
func is_even a = im a == 0 && (abs a % 2) == 0
export is_odd, is_even
