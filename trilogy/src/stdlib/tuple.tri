## Retrieves the first element of the tuple
func fst x:_ = x
export fst

test "fst returns the first" {
    assert fst (1:2) == 1
}

## Retrieves the second element of the tuple
func snd _:x = x
export snd

test "snd returns the second" {
    assert snd (1:2) == 2
}

## Transform the first value of the tuple, leaving the second unchanged.
func mapfst f (x:y) = f x : y
export mapfst

test "mapfst transforms the first" {
    assert mapfst (fn x. x * 2) (4:2) == (8:2)
}

test not "mapfst works with a procedure" {
    mapfst (do(x) { return x * 2 }) (4:2)
}

## Transform the second value of the tuple, leaving the first unchanged.
func mapsnd f (x:y) = x : f y
export mapsnd

test "mapsnd transforms the second" {
    assert mapsnd (fn x. x * 2) (4:2) == (4:4)
}

test not "mapsnd works with a procedure" {
    mapsnd (do(x) { return x * 2 }) (4:2)
}

func length unit = 0
func length x : xs = 1 + length xs
export length

test "length" {
    assert length (1:2:3:unit) == 3
    assert length unit == 0
}

func concat unit ys = ys
func concat x:xs ys = x : concat xs ys
export concat

test "concat" {
    assert concat (1:2:3:unit) (4:5:unit) == 1:2:3:4:5:unit
    assert concat unit (4:5:unit) == 4:5:unit
    assert concat (1:2:3:unit) unit == 1:2:3:unit
}

func take 0 _ = unit
func take _ unit = unit
func take n x:xs = x : take (n - 1) xs
export take

test "take" {
    assert take 2 (1:2:3:4:5:unit) ==  1:2:unit
    assert take 2 unit ==  unit
}

func skip 0 xs = xs
func skip _ unit = unit
func skip n _:xs = skip (n - 1) xs
export skip

test "skip" {
    assert skip 2 (1:2:3:4:5:unit) ==  3:4:5:unit
    assert skip 2 unit ==  unit
}

func to_list [] = unit
func to_list [x, ..xs] = x : to_list xs
export to_list

test "to_list" {
    assert to_list [1, 2, 3] == 1 : 2 : 3 : unit
    assert to_list [] == unit
}
