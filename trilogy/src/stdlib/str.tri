module native at "trilogy:str/native"
module iter at "trilogy:iter"

## Returns an empty string
proc empty!() {
    return ""
}
export empty

## Returns the string value
func of s = s
export of

## Return an array of all the characters in this string
const chars = native::chars
export chars

test "chars" {
    assert chars "hello" == ['h', 'e', 'l', 'l', 'o']
}

## Replace all occurrences of needle with replacement in haystack.
const replace = native::replace
export replace

test "replace replaces all occurrences" {
    assert replace 'l' "n" "hello" == "henno"
    assert replace "ll" "n" "hello" == "heno"
    assert replace "lll" "ll" "llll" == "lll"
}

## Replace at most n occurrences of needle with replacement in haystack.
const replace_n = native::replace_n
export replace_n

test "replace_n replaces at most n" {
    assert replace_n 1 'l' "n" "hello" == "henlo"
    assert replace_n 3 'l' "n" "hello" == "henno"
    assert replace_n 1 "ll" "n" "hello hello" == "heno hello"
}

## Returns the length of the string.
const length = native::length
export length

test "string length" {
    assert length "hello" == 5
    assert length "" == 0
}

## Splits a string at a separator, returning an array. The separator is not included
## in any of the strings in the returned array. If no splits are performed, returns
## an array of the whole string.
const split = native::split
export split

test "string split" {
    assert split " " "hello there world" == ["hello", "there", "world"]
    assert split "f" "hello there world" == ["hello there world"]
    assert split "l" "hello there world" == ["he", "", "o there wor", "d"]
}

## Splits a string at a separator at most n times.
const split_n = native::split_n
export split_n

test "string split_n" {
    assert split_n 1 " " "hello there world" == ["hello", "there world"]
    assert split_n 2 "f" "hello there world" == ["hello there world"]
    assert split_n 2 "l" "hello there world" == ["he", "", "o there world"]
}

## Split a string into lines. An empty trailing line is omitted.
##
## NOTE: At this time, lines are treated as "\n" characters. CRLF is not supported.
## Maybe later.
func lines str = match split '\n' str
    case [..arr, ""] then arr
    case arr then arr
    else []
export lines

test "lines" {
    assert lines "hello\nworld" == ["hello", "world"]
    assert lines "hello\nworld\n" == ["hello", "world"]
    assert lines "hello\n\nworld\n" == ["hello", "", "world"]
    assert lines "hello world" == ["hello world"]
}

## Append a suffix to a string.
func append suf str = str <> suf
export append

test "append" {
    assert append "x" "y" == "yx"
}

## Converts a value to a string.
const cast = native::cast
export cast

test "cast converts numbers to string" {
    assert cast 0 == "0"
    assert cast 3 == "3"
    assert cast (-3) == "-3"
    assert cast 1/3 == "1/3"
    assert cast 0.3 == "3/10"
    assert cast 3i5 == "3+5i"
    assert cast (3-0i5) == "3-5i"
}

test "cast converts string to string (noop)" {
    assert cast "hello" == "hello"
}

test "cast converts boolean to string" {
    assert cast true == "true"
    assert cast false == "false"
}

test "cast converts unit to string" {
    assert cast unit == "unit"
}

test "cast converts atom to string" {
    assert cast 'hello == "'hello"
}

test "cast converts struct to string" {
    assert cast 'hello(3) == "'hello(3)"
}

test "cast converts character to string" {
    assert cast 'a' == "a"
}

test "cast converts bits to string" {
    assert cast 0bb1100 == "1100"
    assert cast 0bb == ""
}

test "cast converts array to string" {
    assert cast [1, 2, 3] == "[1,2,3,]"
}

test "cast converts tuple to string" {
    assert cast (1:2) == "(1:2)"
}

## Chomps the trailing newline (\n, 0x0A) off a string. Will only consume at most
## one trailing newline.
func chomp s <> "\n" = s
func chomp s = s
export chomp

test "chomp removes a trailing newline" {
    assert chomp "hello\n" == "hello"
}

test "chomp removes only one trailing newline" {
    assert chomp "hello\n\n" == "hello\n"
}

test "chome does not affect the string otherwise" {
    assert chomp "hello\nworld" == "hello\nworld"
}

## Extracts a slice of a string, given the start character and the number
## of characters to take. Negative indices are not permitted. Ranges that
## extend beyond the end of the string simply end at the end of the string.
const slice = native::slice
export slice

test "slice can slice" {
    assert slice 2 3 "hello world" == "llo"
    assert slice 0 5 "hello world" == "hello"
    assert slice 10 4 "hello world" == "d"
}

## Returns the first n characters of a string.
func take n = slice 0 n
export take

test "take takes the first n characters" {
    assert take 3 "hello" == "hel"
    assert take 6 "hello" == "hello"
    assert take 0 "hello" == ""
}

## Skips the first n characters of a string, returning the rest.
func skip n s = slice n (length s) s
export skip

test "skip drops the first n characters" {
    assert skip 3 "hello" == "lo"
    assert skip 6 "hello" == ""
    assert skip 0 "hello" == "hello"
}

## Collection interface for joining an iterator of strings into a single string
## with a given joiner
module joined j {
    proc empty!() { return "" }
    func of x = x
    func append x y = y <> j <> x
    export empty, of, append
}

test "joined" {
    let str = iter::of ["a", "b", "c"] |> iter::collect (joined " ")
    assert str == "a b c"
}
