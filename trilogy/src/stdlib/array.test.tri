module array at "trilogy:array" use length, slice, is_empty, from, append, push, map, flatmap, flatten, filter, fold, foldr, first, last, take, skip, contains, find, position, any, all, split, chunks, zip, partition, sort, transpose, concat

test "length" {
    assert length [1, 2, 3] == 3
    assert length [] == 0
}

test "slice" {
    slice 2 4 [1, 2, 3, 4, 5, 6, 7, 8] == [3, 4, 5, 6]
    slice 7 4 [1, 2, 3, 4, 5, 6, 7, 8] == [8]
    slice 0 3 [1, 2, 3, 4, 5, 6, 7, 8] == [1, 2, 3]
}

test "is_empty" {
    assert is_empty []
    assert !(is_empty [1])
    assert !(is_empty [[]])
}

test "from" {
    assert from [1, 2, 3] == [1, 2, 3]

    let arr = from [| 1, 2, 3 |]
    assert contains 1 arr
    assert contains 2 arr
    assert contains 3 arr

    let arr2 = from {| 1 => 1, 2 => 2, 3 => 3 |}
    assert contains (1:1) arr2
    assert contains (2:2) arr2
    assert contains (3:3) arr2

    assert from (1:2:3:unit) == [1, 2, 3]
}

test "append" {
    assert append 3 [1, 2] == [1, 2 ,3]
    assert append 3 [] == [3]
}

test "push" {
    let arr = [1, 2]
    assert push!(arr, 3) === arr
    assert arr == [1, 2, 3]
}

test "map" {
    assert map (fn x. x * 2) [1, 2, 3] == [2, 4, 6]
    assert map (fn _. end) [] == []
}

test not "map accepts a closure" {
    map (do(n) { return 2 * n }) [1, 2, 3]
}

test "flatmap" {
    assert flatmap (fn x. [x, x]) [1, 2, 3] == [1, 1, 2, 2, 3, 3]
    assert flatmap (fn x. [x, [x]]) [1, 2, 3] == [1, [1], 2, [2], 3, [3]]
}

test "flatten" {
    assert flatten [[1, 2], [3, 4]] == [1, 2, 3, 4]
    assert flatten [[1, [2]], [3, [4]]] == [1, [2], 3, [4]]
}

test "filter" {
    assert filter (fn x. x > 3) [1, 2, 3, 4, 5] == [4, 5]
    assert filter (fn _. end) [] == []
}

test not "filter accepts a closure" {
    filter (do(x) { return x > 3 }) [1, 2, 3, 4, 5]
}

test "fold" {
    assert fold (fn a b. a:b) 0 [1, 2, 3] == ((0:1):2):3
    assert fold (fn _ _. end) 0 [] == 0
}

test "foldr" {
    assert foldr (fn a b. a:b) 0 [1, 2, 3] == ((0:3):2):1
    assert foldr (fn _ _. end) 0 [] == 0
}

test "first" {
    assert first [1, 2] == 1
    with first []
        when 'MIA then { exit unit }
        else cancel unit
    assert false
}

test "last" {
    assert last [1, 2] == 2
    with last []
        when 'MIA then { exit unit }
        else cancel unit
    assert false
}

test "take" {
    assert take 3 [1, 2, 3, 4, 5] == [1, 2, 3]
    assert take 3 [1, 2] == [1, 2]
    assert take 3 [] == []
    assert take 0 [1, 2] == []
}

test "skip" {
    assert skip 3 [1, 2, 3, 4, 5] == [4, 5]
    assert skip 3 [1, 2] == []
    assert skip 3 [] == []
    assert skip 0 [1, 2] == [1, 2]
}

test "contains" {
    assert contains 3 [1, 2, 3]
    assert !(contains 4 [1, 2, 3])
    assert !(contains 1 [])
}

test "find" {
    assert find (fn x. x > 1) [1, 2, 3] == 2
    with find (fn x. x > 4) [1, 2, 3] []
        when 'MIA then { exit unit }
        else cancel unit
    assert false
}

test "position" {
    assert position (fn x. x > 1) [1, 2, 3] == 1
    with position (fn x. x > 4) [1, 2, 3] []
        when 'MIA then { exit unit }
        else cancel unit
    assert false
}

test "any" {
    assert any (fn x. x > 1) [1, 2, 3]
    assert !(any (fn x. x > 4) [1, 2, 3])
    assert !(any (fn _. true) [])
    assert any (fn x. if x == 1 then true else end) [1, 2]
}

test "all" {
    assert all (fn x. x >= 1) [1, 2, 3]
    assert !(all (fn x. x > 1) [1, 2, 3])
    assert all (fn _. false) []
    assert !(all (fn x. if x == 1 then false else end) [1, 2])
}

test "split" {
    assert split (fn x. x % 2 == 0) [1, 2, 3, 5, 4, 7] == [[1], [3, 5], [7]]
}

test "chunks" {
    assert chunks 1 [1, 2, 3] == [[1], [2], [3]]
    assert chunks 2 [1, 2, 3] == [[1, 2], [3]]
}

test "zip" {
    assert zip [1, 2, 3] [4, 5, 6] == [1:4, 2:5, 3:6]
    assert zip [1, 2] [4, 5, 6] == [1:4, 2:5]
    assert zip [1, 2, 3] [4, 5] == [1:4, 2:5]
    assert zip [] [4, 5] == []
    assert zip [1, 2] [] == []
    assert zip [] [] == []
}

test "partition" {
    assert partition ((>) 3) [1, 2, 3, 4, 5] == ([1, 2]:[3, 4, 5])
    assert partition ((<) 3) [1, 2, 3, 4, 5] == ([4, 5]:[1, 2, 3])
}

test "sort" {
    assert sort (<) [3, 2, 5, 1, 4, 2, 7, 6, 5] == [1, 2, 2, 3, 4, 5, 5, 6, 7]
    assert sort (>) [3, 2, 5, 1, 4, 2, 7, 6, 5] == [7, 6, 5, 5, 4, 3, 2, 2, 1]
    assert sort (>) [[1, 2, 3], [1, 1, 1], [2, 3, 4], [3, 3, 3]] == [
        [3, 3, 3],
        [2, 3, 4],
        [1, 2, 3],
        [1, 1, 1],
    ]
}

test "transpose" {
    assert transpose [[1, 2, 3], [4, 5, 6], [7, 8, 9]] == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
}

test "concat" {
    assert concat [] [] == []
    assert concat [1, 2] [3, 4] == [1, 2, 3, 4]
    assert concat [1, 2] [2] == [1, 2, 2]
}
