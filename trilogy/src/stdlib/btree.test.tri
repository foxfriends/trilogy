module btreemod at "trilogy:btree" use btree

const ltree = btree (<=)

test "insert" {
    let mut tree = ltree::empty
    tree = ltree::insert 5 tree
    assert tree == 'node(5:'empty:'empty)
    tree = ltree::insert 4 tree
    assert tree == 'node(5:'node(4:'empty:'empty):'empty)
    tree = ltree::insert 7 tree
    assert tree == 'node(5:'node(4:'empty:'empty):'node(7:'empty:'empty))
}

test "from" {
    assert ltree::from [2, 1, 3] == 'node(2:(ltree::of 1):(ltree::of 3))
}

test "min" {
    let mut tree = ltree::empty
    tree = ltree::insert 5 tree
    assert ltree::min tree == 5
    tree = ltree::insert 4 tree
    assert ltree::min tree == 4
    tree = ltree::insert 7 tree
    assert ltree::min tree == 4
}

test "pop_min" {
    let mut tree = ltree::empty
    tree = ltree::insert 5 tree
    tree = ltree::insert 4 tree
    tree = ltree::insert 7 tree
    let min:rest = ltree::pop_min tree
    assert min == 4
    assert rest == ltree::from [5, 7]
}

test "max" {
    let mut tree = ltree::empty
    tree = ltree::insert 5 tree
    assert ltree::max tree == 5
    tree = ltree::insert 4 tree
    assert ltree::max tree == 5
    tree = ltree::insert 7 tree
    assert ltree::max tree == 7
}

test "pop_max" {
    let mut tree = ltree::empty
    tree = ltree::insert 5 tree
    tree = ltree::insert 4 tree
    tree = ltree::insert 7 tree
    let max:rest = ltree::pop_max tree
    assert max == 7
    assert rest == ltree::from [5, 4]
}
