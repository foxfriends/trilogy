module array at "trilogy:array"
module asm at "trilogy:record/asm" use delete

export delete

## Returns an empty record.
proc empty!() {
    return {| |}
}
export empty

## Returns a record of a single key:value pair
func of (x:y) = {| x => y |}
export of

## Returns true if the key is associated with a value in this record.
func contains key {| key => _, .._ |} = true
func contains _ {| .._ |} = false
export contains

## Removes a key from the record, returning a new record without that key.
func remove key {| key => _, ..rec |} = rec
func remove _ {| ..xs |} = xs
export remove

## Returns an iterator of all keys of this record
func keys rec = do() {
  for key:_ in rec {
    yield 'next(key)
  }
}
export keys

## Returns an iterator of all values of this record
func values rec = do() {
  for _:value in rec {
    yield 'next(value)
  }
}
export values

## Computes the number of entries in this record.
func length {| |} = 0
func length {| ..xs |} = xs
    |> array::from
    |> array::length
export length

## Returns the element of the record at the given key.
##
## # Yields
##
## 'MIA if the key is not in the record
func get key {| ..rec |} = rec . key
export get

## Inserts a key-value pair into the record, returning a new record with the new entry included.
##
## If the record already contained a value for the key, it is replaced.
func insert key value {| ..xs |} = {| ..xs, key => value |}
export insert

## Appends a key:value pair to the record
func append (key:value) = insert key value
export append
