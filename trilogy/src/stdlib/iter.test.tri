module array at "trilogy:array"
module set at "trilogy:set"
module record at "trilogy:record"
module iter at "trilogy:iter" use of, fold, map, flatten, flatmap, collect, filter, rangex, range, make_rangex, make_range, repeat, ignore, enumerate

test "fold" {
    let sum = of [1, 2, 3]
        |> fold (fn a b. a + b) 0
    assert sum == 6
}

test "map" {
    let doubled = of [1, 2, 3]
        |> map (fn x. x * 2)
        |> collect array
    assert doubled == [2, 4, 6]
}

test "flatten" {
    let triple = repeat 3 (of [1, 2, 3])
        |> flatten
        |> collect array
    assert triple == [1, 2, 3, 1, 2, 3, 1, 2, 3]
}

test "flatmap" {
    let ranges = make_range 1 3
        |> flatmap (make_range 1)
        |> collect array
    assert ranges == [1, 1, 2, 1, 2, 3]
}

test "collect" {
    assert collect array (of [1, 2, 3]) == [1, 2, 3]
    assert collect set (of [1, 2, 3]) == [| 1, 2, 3 |]
    assert collect record (do() $(x:1 for x in [1, 2, 3])) == {| 1 => 1, 2 => 1, 3 => 1 |}
}

test "filter" {
    let odd = of [1, 2, 3]
        |> filter (fn x. x % 2 == 1)
        |> collect array
    assert odd == [1, 3]
}

test "rangex" {
    let mut total = 0
    for x in rangex 1 5 {
        total += x
    }
    assert total == 10
}

test "range" {
    let mut total = 0
    for x in range 1 5 {
        total += x
    }
    assert total == 15
}

test "make_rangex" {
    assert (make_rangex 0 5 |> collect array) == [0, 1, 2, 3, 4]
}

test "make_range" {
    assert (make_range 0 5 |> collect array) == [0, 1, 2, 3, 4, 5]
}

test "repeat" {
    assert (repeat 3 'a |> collect array) == ['a, 'a, 'a]
}

test "ignore" {
    of [1, 2, 3] |> ignore
}

test "enumerate" {
    assert (of [1, 2, 3]
        |> enumerate
        |> collect array)
        == [0:1, 1:2, 2:3]
}
