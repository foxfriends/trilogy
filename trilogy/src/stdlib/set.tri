module array at "trilogy:array"

## Returns an empty set
proc empty!() {
    return [| |]
}
export empty

## Returns a set of a single value
func of x = [| x |]
export of

## Returns true if the value `x` is contained within the set.
func contains x [| x, .._ |] = true
func contains _ [| .._ |] = false
export contains

test "contains can find a value" {
    assert contains 3 [| 1, 2, 3 |]
}

test "contains can not find a value" {
    assert !(contains 4 [| 1, 2, 3 |])
}

test "empty set contains nothing" {
    assert !(contains 1 [||])
}

## Adds a value to the set, returning a new set
func insert x [| ..xs |] = [| x, ..xs |]
export insert

test "insert adds the value to the set" {
    assert insert 3 [| 1, 2 |] == [| 1, 2, 3 |]
}

test "insert cannot add a duplicate value to the set" {
    assert insert 3 [| 1, 2, 3 |] == [| 1, 2, 3 |]
}

test "insert adds to the empty set" {
    assert insert 3 [| |] == [| 3 |]
}

const append = insert
export append

## Removes a value from the set, returning a new set without that value.
func remove x [| x, ..xs |] = xs
func remove _ [| ..xs |] = xs
export remove

test "remove removes the value from the set" {
    assert remove 3 [| 1, 2, 3 |] == [| 1, 2 |]
}

test "remove removes nothing when it is not there" {
    assert remove 3 [| 1, 2 |] == [| 1, 2 |]
}

test "remove removes nothing from the empty set" {
    assert remove 3 [| |] == [| |]
}

## Computes a new set that is the union of the two original sets.
func union [| ..ls |] [| ..rs |]  = [| x for x in ls or x in rs |]
export union

test "union combines two sets" {
    assert union [| 1, 2 |] [| 2, 3 |] == [| 1, 2, 3 |]
}

test "union combines empty sets" {
    assert union [||] [||] == [||]
}

## Computes a new set that is the intersection of the two original sets.
func intersection [| ..ls |] [| ..rs |] = [| l for l in ls and is contains l rs |]
export intersection

test "intersection returns the elements in both sets" {
    assert intersection [| 1, 2 |] [| 2, 3 |] == [| 2 |]
}

test "intersection returns the whole set when they are the same" {
    assert intersection [| 1, 2 |] [| 1, 2 |] == [| 1, 2, |]
}

test "intersection returns the empty set when one is empty" {
    assert intersection [| |] [| 1, 2 |] == [| |]
}

## Returns a new set that contains the elements of the second set that are not contained
## in the first.
func subtract [| ..ls |] [| ..rs |] = [| l for l in ls and not is contains l rs |]
export subtract

test "subtract returns the elements in the left set but not the right" {
    assert subtract [| 1, 2 |] [| 2, 3 |] == [| 1 |]
}

test "subtract returns the empty set when they are the same" {
    assert subtract [| 1, 2 |] [| 1, 2 |] == [| |]
}

## Returns a new set that is the symmetric difference of the two original sets.
func difference [| ..ls |] [| ..rs |] =
    [| x
        for (x in ls and not is contains x rs)
        or (x in rs and not is contains x ls)
    |]
export difference

test "difference returns the elements in one set but not the other" {
    assert difference [| 1, 2 |] [| 2, 3 |] == [| 1, 3 |]
}

test "difference returns the empty set when they are the same" {
    assert difference [| 1, 2 |] [| 1, 2 |] == [| |]
}

test "difference returns the union when they are different" {
    assert difference [| 1, 2 |] [| 3, 4 |] == [| 1, 2, 3, 4 |]
}

## Computes the number of elements in this set.
func length [| |] = 0
func length [| ..xs |] = xs
    |> array::from
    |> array::length
export length

test "length returns the number of elements in the set" {
    assert length [| 1, 2, 3 |] == 3
}

test "length is 0 for empty sets" {
    assert length [| |] == 0
}
