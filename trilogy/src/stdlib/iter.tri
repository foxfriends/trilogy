#! Helper functions for working with iterators, where they are defined
#! as 0-arity procedures that may yield effects of the form `'next(value)`
#! any number of times.
#!
#! Since yielding effects is otherwise eager, iterators can only exist as
#! closures which are to be called later, so each iterator combinator is
#! expecting to receive such a procedure closure as a parameter, and will
#! return a new, transformed procedure.
#!
#! Iterators do not expect to receive any input when resumed after each yield,
#! and are not expected to produce any final output at the end (the iterator
#! procedures return `unit`). Procedures behaving otherwise are better described
#! as generators, and are not, at this time, intended to be handled by the methods
#! here.

module array at "trilogy:array"
module set at "trilogy:set"
module record at "trilogy:record"
module fp at "trilogy:fp"

## Returns an empty iterator
proc empty!() { return do() {} }
export empty

## Create an iterator from the elements of a collection.
func of xs = do() $(x for x in xs)
export of

## Consumes an iterator by folding each value along with an accumulator. The first
## yielded value is provided to the initialization function to produce the initial
## value of the accumulator. If no values are emitted, yields 'EMPTY
func reduce_init f init xs =
    let mut ok = false,
    let mut acc = unit,
    with xs!()
        when 'next(v) invert {
            if ok {
                acc = f acc v
            } else {
                ok = true
                acc = init v
            }
            resume
            cancel acc
        }
        else yield
export reduce_init

## Consumes an iterator by folding each value along with an accumulator. The first
## yielded value is used as the initial value of the accumulator. If no values are
## emitted, yields 'EMPTY
func reduce f = reduce_init f (fp::id)
export reduce

## Consumes an iterator by folding each value along with an accumulator, starting
## from the given initial value. This function does not return an iterator, but
## the final value of the accumulator.
func fold f i xs =
    let mut acc = i,
    with xs!()
        when 'next(v) invert {
            acc = f acc v
            resume
            cancel acc
        }
        else yield
export fold

test "fold" {
    let sum = of [1, 2, 3]
        |> fold (fn a b. a + b) 0
    assert sum == 6
}

## Creates a new iterator whose values are the values of the original iterator,
## transformed by a provided function.
func map f xs = do() {
    with { xs!() }
        when 'next(v) resume yield 'next(f v)
        else yield
}
export map

test "map" {
    let doubled = of [1, 2, 3]
        |> map (fn x. x * 2)
        |> collect array
    assert doubled == [2, 4, 6]
}

## Creates a new iterator-of-iterators by flattening each yielded iterator's
## yielded values into a single iterator.
func flatten xs = do() {
    with { xs!() }
        when 'next(ys) resume ys!()
        else yield
}
export flatten

test "flatten" {
    let triple = repeat 3 (of [1, 2, 3])
        |> flatten
        |> collect array
    assert triple == [1, 2, 3, 1, 2, 3, 1, 2, 3]
}

## Maps each value of an iterator using the provided function, expecting the
## transformed value to be an iterator which is flattened into the resulting
## iterator.
func flatmap f = map f >> flatten
export flatmap

test "flatmap" {
    let ranges = range 1 3
        |> flatmap (range 1)
        |> collect array
    assert ranges == [1, 1, 2, 1, 2, 3]
}

## Collect an iterator into a collection.
##
## A collection is a module exporting `proc empty!()` and `func append x xs`
func collect collection =
    with reduce_init (fp::flip (collection::append)) (collection::of)
        when 'EMPTY cancel (collection::empty!())
        else yield
export collect

test "collect" {
    assert collect array (of [1, 2, 3]) == [1, 2, 3]
    assert collect set (of [1, 2, 3]) == [| 1, 2, 3 |]
    assert collect record (do() $(x:1 for x in [1, 2, 3])) == {| 1 => 1, 2 => 1, 3 => 1 |}
}

## Discard values yielded by the iterator for which a predicate returns false.
func filter f xs = do() {
    with { xs!() }
        when 'next(v) if f v resume yield 'next(v)
        when 'next(_) resume unit
        else yield
}
export filter

test "filter" {
    let odd = of [1, 2, 3]
        |> filter (fn x. x % 2 == 1)
        |> collect array
    assert odd == [1, 3]
}

## Creates an iterator that yields the integers in the range [lo..hi)
func rangex lo hi = do() {
    let mut i = lo
    while i < hi {
        yield 'next(i)
        i += 1
    }
}
export rangex

test "rangex" {
    assert (rangex 0 5 |> collect array) == [0, 1, 2, 3, 4]
}

## Creates an iterator that yields the integers in the range [lo..hi]
func range lo hi = rangex lo (hi + 1)
export range

test "range" {
    assert (range 0 5 |> collect array) == [0, 1, 2, 3, 4, 5]
}

## Creates an iterator that emits the value n times
func repeat n value = do() {
    let mut i = 0
    while i < n {
        yield 'next(value)
        i += 1
    }
}
export repeat

test "repeat" {
    assert (repeat 3 'a |> collect array) == ['a, 'a, 'a]
}

## Calls the iterator, discarding any yielded values.
func ignore xs =
    with xs!()
        when 'next(_) resume unit
        else yield
export ignore

test "ignore" {
    of [1, 2, 3] |> ignore
}

## Tuples each element of an iterator with its index.
func enumerate xs = do () {
    let mut i = 0
    with { xs!() }
        when 'next(v) invert {
            yield 'next(i:v)
            i += 1
            cancel resume unit
        }
        else yield
}
export enumerate

test "enumerate" {
    assert (of [1, 2, 3]
        |> enumerate
        |> collect array)
        == [0:1, 1:2, 2:3]
}
