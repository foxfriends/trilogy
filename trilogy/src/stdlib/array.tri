module iter at "trilogy:iter" use rangex
module native at "trilogy:array/native" use length, slice, reverse
export length, slice, reverse

## Returns an empty array
proc empty!() {
    return []
}
export empty

## Returns true if the array is empty, and false otherwise.
func is_empty [] = true
func is_empty typeof 'array = false
export is_empty

## Returns an array of a single value
func of x = [x]
export of

## Creates a new array from the elements of an iterator.
func from iter = [x for x in iter]
export from

## Appends a single element to the array.
func append x arr = [..arr, x]
export append

## Pushes an element onto the end of an array. The array is mutated.
## Returns the array.
proc push!(array, x) {
    array.(length array) = x
    return array
}
export push

## Computes a new array by applying the function `f` to each element
## of the original array.
func map f [] = []
func map f [x, ..xs] = [f x, ..map f xs]
export map

## Computes a new array by applying the function `f` to each element
## of the original array to get intermediate arrays, which are each
## flattened.
func flatmap f [] = []
func flatmap f [x, ..xs] = [..f x, ..flatmap f xs]
export flatmap

## Flattens an array of arrays into a single array. Only flattens
## one layer deep.
func flatten [] = []
func flatten [x, ..xs] = [..x, ..flatten xs]
export flatten

## Computes a new array by removing all values for which the predicate `f`
## returns `false`.
func filter f [] = []
func filter f [x, ..xs] = if f x then [x, ..filter f xs] else filter f xs
export filter

## Computes a single value from an array by starting with the accumulator `a` and
## applying `f acc x` for each element `x` of the array, starting from the
## first (leftmost) element.
func fold f a [] = a
func fold f a [x, ..xs] = fold f (f a x) xs
export fold

## Computes a single value from an array by starting with the accumulator `a` and
## applying `f acc x` for each element `x` of the array, starting from the
## last (rightmost) element.
func foldr f a [] = a
func foldr f a [..xs, x] = foldr f (f a x) xs
export foldr

## Returns the first element of the array.
##
## # Yields
##
## * 'MIA if the array is empty
func first [x, .._] = x
func first [] = yield 'MIA
export first

## Returns the last element of the array.
##
## # Yields
##
## * 'MIA if the array is empty
func last [.._, x] = x
func last [] = yield 'MIA
export last

## Takes the first `n` elements of the array, discarding the rest.
## If the array's length is less than `n`, returns the whole array.
func take n = slice 0 n
export take

## Skips the first `n` elements of the array, returning the rest.
## If the array's length is less than `n`, returns an empty array.
func skip n array = slice n (length array) array
export skip

## Returns true if the value `x` is contained within the array.
func contains x [] = false
func contains x [^x, .._] = true
func contains x [_, ..xs] = contains x xs
export contains

## Returns the first element in the array for which the predicate returns true.
## If none is found, yields 'MIA
func find _ [] = yield 'MIA
func find f [x, ..xs] = if f x then x else find f xs
export find

## Returns the index of the first element in the array for which the predicate returns true.
## If none is found, yields 'MIA
func position _ [] = yield 'MIA
func position f [x, ..xs] = if f x then 0 else 1 + position f xs
export position

## Returns true if the predicate returns true for any element in the array, or
## false otherwise. This will short circuit on the first element that returns true.
func any _ [] = false
func any f [x, ..xs] = if f x then true else any f xs
export any

## Returns true if the predicate returns true for every element in the array, or
## false otherwise. This will short circuit on the first element that returns false.
func all _ [] = true
func all f [x, ..xs] = if f x then all f xs else false
export all

func split_acc acc _ [] = [acc]
func split_acc acc f [x, ..xs] = if f x then [acc, ..split_acc [] f xs] else split_acc [..acc, x] f xs
func split pred arr = split_acc [] pred arr
export split

func chunks _ [] = []
func chunks 0 _ = []
func chunks n arr = [take n arr, ..chunks n (skip n arr)]
export chunks

func zip [] _ = []
func zip _ [] = []
func zip [x, ..xs] [y, ..ys] = [(x:y), ..zip xs ys]
export zip

## Separate an array into two arrays based on a predicate.
## The left returned array contains all elements for which the predicate was true.
## The right returned array contains all elements for which the predicate was false.
func partition pred arr =
    fold (fn l:r e. if pred e then append e l:r else l:append e r) ([]:[]) arr
export partition

func merge _ xs [] = xs
func merge _ [] ys = ys
func merge cmp [x, ..xs] [y, ..ys] =
    if cmp x y
    then [x, ..merge cmp xs [y, ..ys]]
    else [y, ..merge cmp [x, ..xs] ys]
export merge

## Sort an array according to a predicate. When the predicate returns true for
## values which are equal, this is a stable sort.
##
## The resulting array is a new array sorted in "ascending" order, assuming the
## predicate was `(<=)`.
func sort _ [] = []
func sort _ [a] = [a]
func sort cmp arr =
    let half = length arr // 2,
    merge cmp (sort cmp <| take half arr) (sort cmp <| skip half arr)
export sort

## Transpose an array of arrays, swapping the first and second indices of each element.
##
## This works on rectangular arrays. Behaviour on non-rectangular arrays is not currently
## defined.
func transpose arr = [[arr.y.x for y in rangex 0 (length arr)] for x in rangex 0 (length (arr.0))]
export transpose

## Concatenates two arrays, returning the elements of both in order.
func concat a b = [..a, ..b]
export concat
