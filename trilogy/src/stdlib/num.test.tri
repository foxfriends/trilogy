module num at "trilogy:num" use min, max, abs, parts, parse_int, is_odd, is_even

test "parse_int" {
    assert parse_int 16 "ff6600" == 0xff6600
    assert parse_int 10 "100" == 100
    assert parse_int 2 "100" == 0b100
}

test "parts" {
    assert parts 3i5 == 3:5
    assert parts (3 - 0i5) == 3:-5
    assert parts 3 == 3:0
    assert parts (-3i5) == -3:-5
}

test "abs" {
    assert abs 3 == 3
    assert abs (-3) == 3
}

test not "abs works on non-numbers" {
    abs "NAN"
}

test "max" {
    assert max 1 3 == 3
    assert max 1 (-3) == 1
    with { max 3 "A" }
        when 'NAN cancel unit
        else invert { assert false }
}

test "min" {
    assert min 1 3 == 1
    assert min 1 (-3) == (-3)
    with { min 3 "A" }
        when 'NAN cancel unit
        else invert { assert false }
}

test "is_odd" {
    assert is_odd 3
    assert is_odd 1
    assert "neg" as is_odd (-1)
    assert !(is_odd 2)
    assert !(is_odd 1.5)
    assert !(is_odd 1i1)
    assert "imev" as !(is_odd 2i2)
}

test "is_even" {
    assert is_even 2
    assert is_even 4
    assert is_even 0
    assert "neg" as is_even (-2)
    assert "odd" as !(is_even 3)
    assert "dec" as !(is_even 1.5)
    assert "imodd" as !(is_even 1i1)
    assert "imev" as !(is_even 2i2)
}
